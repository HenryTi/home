{"version":3,"sources":["../../tonva-tools/dist/entry/login.js","../../tonva-tools/dist/entry/userApi.js","../../tonva-tools/dist/entry/register.js","../../tonva-tools/dist/entry/regSuccess.js","../../tonva-tools/dist/entry/forget.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACiB;AACe;AAChC;AACA;AACA;AACoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,mLAAuD,wBAAwB;AAC/E;AACA;AACA,kFAAiD,2BAA2B;AAC5E,8HAAyC,wBAAwB,qBAAqB,yLAA6D,wBAAwB,IAAI;AAC/K,wHAA0C,gCAAgC;AAC1E,yEAAwC;AACxC;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,6EAA4C,iCAAiC,wCAAwC,EAAE;AACvH,iFAAgD,sDAAsD,uCAAuC,EAAE;AAC/I,kFAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,6EAA4C,SAAS,iBAAiB,EAAE;AACxE,iIAAgD,0BAA0B;AAC1E,yEAAwC,0BAA0B;AAClE,kIAA6C,yNAAyF;AACtI;AACA;AAAA;AAAA;AACA,iC;;;;;;;;;;AC/EoB;AACE;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA,mC;;;;;;;;;;;;;AChBA;AAAA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AAC2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,yCAAyC;AAC5D;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,mDAAmD,KAAK,MAAM,IAAI;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,iBAAiB,qCAAqC;AACtD,iBAAiB,iBAAiB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,kCAAkC;AAClC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,kCAAkC;AAClC,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B,kCAAkC;AAClC,iCAAiC;AACjC;AACA,qCAAqC,0BAA0B;AAC/D;AACA;AACA,qCAAqC,wCAAwC;AAC7E,yBAAyB;AACzB;AACA;AACA,iCAAiC;AACjC,kCAAkC;AAClC,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,uBAAuB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,6BAA6B;AAC7B,qBAAqB,yCAAyC;AAC9D,iBAAiB,2CAA2C;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,8LAA8D,uBAAuB;AACrF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,wKAAoD,wBAAwB;AAC5E;AACA;AACA;AACA,wHAA0C,eAAe;AACzD,yEAAwC;AACxC;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,6EAA4C,iCAAiC,wCAAwC,EAAE;AACvH,iFAAgD,sDAAsD,uCAAuC,EAAE;AAC/I,kFAAiD,SAAS;AAC1D;AACA;AACA;AACA;AACA,yBAAyB,EAAE;AAC3B,6EAA4C,SAAS,iBAAiB,EAAE;AACxE,8HAAgD,0BAA0B;AAC1E;AACA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,gBAAgB;AAC5D;AACA,yCAAyC;AACzC;AACA;AACA;AACA,8CAA8C;AAC9C,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,2CAA2C,eAAe;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C,2CAA2C,iBAAiB;AAC5D;AACA;AACA;AACA,yCAAyC,oBAAoB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,OAAO,2BAA2B,GAAG;AACtE;AACA;AACA;AACA,oC;;;;;;;;;;;;ACvTA;AAAA;AACA;AACA,mCAAmC,MAAM,6BAA6B,EAAE,YAAY,WAAW,EAAE;AACjG,kCAAkC,MAAM,iCAAiC,EAAE,YAAY,WAAW,EAAE;AACpG,+BAA+B,iEAAiE,uBAAuB,EAAE,4BAA4B;AACrJ;AACA,KAAK;AACL;AACA;AACkC;AACd;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B;AACA,oBAAoB,uBAAuB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,YAAY;AAC3B,yHAA2C,gBAAgB;AAC3D,iIAA4C,0BAA0B;AACtE;AACA,kFAAiD,oBAAoB;AACrE;AACA;AACA;AACA;AACA;AACA,sIAAiD,6DAA6D;AAC9G;AACA;AAAA;AAAA;AACA,sC;;;;;;;;;;;AC1CA;AACe;AACf;AACA;AACA,wHAA0C,iBAAiB;AAC3D;AACA;AAAA;AAAA;AACA,kC","file":"static/js/0.345d6ab3.chunk.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { nav, Page, FormSchema } from '../ui';\r\nimport RegisterView from './register';\r\nimport Forget from './forget';\r\nimport userApi from './userApi';\r\nimport { ValidForm } from '../index';\r\nexport default class Login extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.schema = new FormSchema({\r\n            fields: [\r\n                {\r\n                    type: 'string',\r\n                    name: 'username',\r\n                    placeholder: '用户名',\r\n                    rules: ['required', 'maxlength:100']\r\n                },\r\n                {\r\n                    type: 'password',\r\n                    name: 'password',\r\n                    placeholder: '密码',\r\n                    rules: ['required', 'maxlength:100']\r\n                },\r\n            ],\r\n            onSumit: this.onLoginSubmit.bind(this),\r\n        });\r\n    }\r\n    onLoginSubmit(values) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let user = yield userApi.login({\r\n                user: values['username'],\r\n                pwd: values['password']\r\n            });\r\n            if (user === undefined) {\r\n                //this.failed();\r\n                this.schema.clear();\r\n                this.schema.errors.push('用户名或密码错！');\r\n            }\r\n            else {\r\n                yield nav.logined(user);\r\n            }\r\n            return undefined;\r\n        });\r\n    }\r\n    click() {\r\n        nav.replace(React.createElement(RegisterView, { logo: this.props.logo }));\r\n    }\r\n    render() {\r\n        let footer = React.createElement(\"div\", { className: 'text-center' },\r\n            React.createElement(Button, { color: \"link\", style: { margin: '0px auto' }, onClick: () => nav.push(React.createElement(RegisterView, { logo: this.props.logo })) }, \"\\u5982\\u679C\\u6CA1\\u6709\\u8D26\\u53F7\\uFF0C\\u8BF7\\u6CE8\\u518C\"));\r\n        return React.createElement(Page, { header: false, footer: footer },\r\n            React.createElement(\"div\", { style: {\r\n                    maxWidth: '400px',\r\n                    margin: '20px auto',\r\n                    padding: '0 30px',\r\n                } },\r\n                React.createElement(\"div\", { className: 'container', style: { display: 'flex', position: 'relative' } },\r\n                    React.createElement(\"img\", { className: 'App-logo', src: this.props.logo, style: { height: '60px', position: 'absolute' } }),\r\n                    React.createElement(\"span\", { style: { flex: 1,\r\n                            fontSize: 'x-large',\r\n                            alignSelf: 'center',\r\n                            textAlign: 'center',\r\n                            margin: '10px',\r\n                        } }, \"\\u540C\\u82B1\")),\r\n                React.createElement(\"div\", { style: { height: '20px' } }),\r\n                React.createElement(ValidForm, { formSchema: this.schema })),\r\n            React.createElement(\"div\", { className: 'constainer' },\r\n                React.createElement(Button, { color: \"link\", block: true, onClick: () => nav.push(React.createElement(Forget, null)) }, \"\\u5FD8\\u8BB0\\u5BC6\\u7801\")));\r\n    }\r\n}\r\n//# sourceMappingURL=login.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../tonva-tools/dist/entry/login.js\n// module id = 218\n// module chunks = 0","import { CenterApi } from '../net';\r\nimport { decodeToken } from '../user';\r\nexport class UserApi extends CenterApi {\r\n    login(params) {\r\n        return this.get('login', params)\r\n            .then((token) => {\r\n            if (token !== undefined)\r\n                return decodeToken(token);\r\n        });\r\n    }\r\n    register(params) {\r\n        return this.post('register', params);\r\n    }\r\n}\r\nconst userApi = new UserApi('tv/user/');\r\nexport default userApi;\r\n//# sourceMappingURL=userApi.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../tonva-tools/dist/entry/userApi.js\n// module id = 219\n// module chunks = 0","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as React from 'react';\r\nimport { nav, Page, FormSchema, ValidForm } from '../ui';\r\nimport LoginView from './login';\r\nimport userApi from './userApi';\r\nimport RegSuccess from './regSuccess';\r\nexport default class Register extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.schema = new FormSchema({\r\n            fields: [\r\n                {\r\n                    type: 'string',\r\n                    name: 'user',\r\n                    placeholder: '用户名',\r\n                    rules: ['required', 'maxlength:100']\r\n                },\r\n                {\r\n                    type: 'password',\r\n                    name: 'pwd',\r\n                    placeholder: '密码',\r\n                    rules: ['required', 'maxlength:100']\r\n                },\r\n                {\r\n                    type: 'password',\r\n                    name: 'rePwd',\r\n                    placeholder: '重复密码',\r\n                    rules: ['required', 'maxlength:100']\r\n                },\r\n            ],\r\n            submitText: '注册新用户',\r\n            onSumit: this.onLoginSubmit.bind(this),\r\n        });\r\n        /*\r\n        private values: Values;\r\n        private timeOut: NodeJS.Timer;\r\n        constructor(props: Props) {\r\n            super(props);\r\n            this.values = {\r\n                user: '',\r\n                pwd: '',\r\n                rePwd: '',\r\n            };\r\n            this.state = {\r\n                values: this.values,\r\n                disabled: true,\r\n                pwdError: false,\r\n                regError: undefined,\r\n            };\r\n        }\r\n        click() {\r\n            nav.replace(<LoginView />);\r\n        }\r\n    \r\n        submit() {\r\n            const {user, pwd, rePwd, country, mobile, email} = this.state.values;\r\n            if (pwd !== rePwd) {\r\n                this.setState({\r\n                    pwdError: true,\r\n                });\r\n                this.timeOutError();\r\n                return false;\r\n            }\r\n            userApi.register({\r\n                nick: undefined,\r\n                user: user,\r\n                pwd: pwd,\r\n                country: undefined,\r\n                mobile: undefined,\r\n                email: undefined,\r\n            }).then(ret => {\r\n                let msg;\r\n                switch (ret) {\r\n                    default: throw 'unknown return';\r\n                    case 0:\r\n                        nav.clear();\r\n                        nav.show(<RegSuccess user={user} pwd={pwd} />);\r\n                        return;\r\n                    case 1:\r\n                        msg = '用户名 ' + user + ' ';\r\n                        break;\r\n                    case 2:\r\n                        msg = '手机号 +' + country + ' ' + mobile + ' ';\r\n                        break;\r\n                    case 3:\r\n                        msg = '电子邮件 ' + email + ' ';\r\n                        break;\r\n                }\r\n                this.setState({\r\n                    regError: msg + '已经被注册过了',\r\n                });\r\n                this.timeOutError();\r\n            });\r\n            return false;\r\n        }\r\n        timeOutError() {\r\n            this.timeOut = global.setTimeout(\r\n                () => {\r\n                    this.setState({\r\n                        pwdError: false,\r\n                        regError: undefined,\r\n                    });\r\n                    global.clearTimeout(this.timeOut);\r\n                    this.timeOut = undefined;\r\n                },\r\n                3000);\r\n        }\r\n        inputChange(event: any) {\r\n            const target = event.target;\r\n            const value = target.type === 'checkbox' ? target.checked : target.value;\r\n            const name = target.name;\r\n            this.values[name] = value;\r\n            if (name === 'pwd') {\r\n                this.values.rePwd = '';\r\n            }\r\n            let {user, pwd, rePwd} = this.values;\r\n            this.setState({\r\n                values: this.values,\r\n                disabled: user.trim().length === 0 || pwd.length === 0 || rePwd.length === 0,\r\n            });\r\n        }\r\n        inputFocus(e: any) {\r\n            this.setState({\r\n                pwdError: false,\r\n                regError: undefined,\r\n            });\r\n        }\r\n        render() {\r\n            let {values, disabled, pwdError, regError} = this.state;\r\n            let {user, pwd, rePwd} = values;\r\n            return (\r\n            <Page header=\"注册\">\r\n            <Container className=\"entry-form\">\r\n                <Form>\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"用户名...\"\r\n                        name=\"user\"\r\n                        value={user}\r\n                        onChange={e => this.inputChange(e)}\r\n                        onFocus={e => this.inputFocus(e)}\r\n                    />\r\n                    <Input\r\n                        type=\"password\"\r\n                        placeholder=\"密码...\"\r\n                        name=\"pwd\"\r\n                        value={pwd}\r\n                        onChange={e => this.inputChange(e)}\r\n                        onFocus={e => this.inputFocus(e)}\r\n                    />\r\n                    <Input\r\n                        type=\"password\"\r\n                        placeholder=\"重复密码...\"\r\n                        name=\"rePwd\"\r\n                        value={rePwd}\r\n                        onChange={e => this.inputChange(e)}\r\n                        onFocus={e => this.inputFocus(e)}\r\n                    />\r\n                    <span className={this.errorClass(pwdError)}>\r\n                        密码错误！\r\n                    </span>\r\n                    <span className={this.errorClass(regError !== undefined)}>\r\n                        {regError}\r\n                    </span>\r\n                    <Button\r\n                        onClick={() => this.submit()}\r\n                        disabled={disabled}\r\n                        block={true}\r\n                        color=\"success\"\r\n                    >\r\n                        注册新用户\r\n                    </Button>\r\n                </Form>\r\n            </Container>\r\n            </Page>\r\n            );\r\n        }\r\n        private errorClass(error: boolean) {\r\n            if (error === false) { return 'hidden-xs-up'; }\r\n        }\r\n        */\r\n    }\r\n    onLoginSubmit(values) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            /*\r\n            let user = await userApi.login({\r\n                user: values['username'],\r\n                pwd: values['password']\r\n            });\r\n            if (user === undefined) {\r\n                //this.failed();\r\n                this.schema.clear();\r\n                this.schema.errors.push('用户名或密码错！');\r\n            } else {\r\n                nav.logined(user);\r\n            }\r\n            return undefined;*/\r\n            //const {user, pwd, rePwd, country, mobile, email} = this.state.values;\r\n            let { user, pwd, rePwd, country, mobile, email } = values;\r\n            if (pwd !== rePwd) {\r\n                this.schema.errors.push('密码不对，请重新输入密码！');\r\n                this.schema.inputs['pwd'].clear();\r\n                this.schema.inputs['rePwd'].clear();\r\n                return undefined;\r\n            }\r\n            let ret = yield userApi.register({\r\n                nick: undefined,\r\n                user: user,\r\n                pwd: pwd,\r\n                country: undefined,\r\n                mobile: undefined,\r\n                email: undefined,\r\n            });\r\n            let msg;\r\n            switch (ret) {\r\n                default: throw 'unknown return';\r\n                case 0:\r\n                    nav.clear();\r\n                    nav.show(React.createElement(RegSuccess, { user: user, pwd: pwd }));\r\n                    return;\r\n                case 1:\r\n                    msg = '用户名 ' + user;\r\n                    break;\r\n                case 2:\r\n                    msg = '手机号 +' + country + ' ' + mobile;\r\n                    break;\r\n                case 3:\r\n                    msg = '电子邮件 ' + email;\r\n                    break;\r\n            }\r\n            this.schema.errors.push(msg + ' 已经被注册过了');\r\n            return undefined;\r\n        });\r\n    }\r\n    click() {\r\n        nav.replace(React.createElement(LoginView, { logo: this.props.logo }));\r\n        //nav.replace(<RegisterView />);\r\n    }\r\n    render() {\r\n        return React.createElement(Page, { header: '注册' },\r\n            React.createElement(\"div\", { style: {\r\n                    maxWidth: '400px',\r\n                    margin: '20px auto',\r\n                    padding: '0 30px',\r\n                } },\r\n                React.createElement(\"div\", { className: 'container', style: { display: 'flex', position: 'relative' } },\r\n                    React.createElement(\"img\", { className: 'App-logo', src: this.props.logo, style: { height: '60px', position: 'absolute' } }),\r\n                    React.createElement(\"span\", { style: { flex: 1,\r\n                            fontSize: 'x-large',\r\n                            alignSelf: 'center',\r\n                            textAlign: 'center',\r\n                            margin: '10px',\r\n                        } }, \"\\u540C\\u82B1\")),\r\n                React.createElement(\"div\", { style: { height: '20px' } }),\r\n                React.createElement(ValidForm, { formSchema: this.schema })));\r\n    }\r\n}\r\n/*\r\n            \r\n            <div className=\"row\">\r\n                <div className=\"col-sm-6 col-sm-offset-3 form-box\">\r\n                    <div className=\"form-bottom\">\r\n                        <form role=\"form\" action=\"\" method=\"post\" className=\"login-form\">\r\n                            <div className=\"form-group\">\r\n                                <label className=\"sr-only\" htmlFor=\"form-username\"\r\n                                    style={{color: \"black\"}}>Username</label>\r\n                                <input type=\"text\" name=\"user\"\r\n                                    ref={input => this.userInput=input}\r\n                                    placeholder=\"用户名...\"\r\n                                    className=\"form-username form-control\"\r\n                                    id=\"form-username\"\r\n                                    onChange={e => this.inputChange(e)}\r\n                                    value={this.state.user} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"sr-only\" htmlFor=\"form-password\">密码</label>\r\n                                <input type=\"password\" name=\"pwd\"\r\n                                    placeholder=\"密码...\"\r\n                                    className=\"form-password form-control\" id=\"form-password\"\r\n                                    onChange={e => this.inputChange(e)}\r\n                                    value={this.state.pwd} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"sr-only\" htmlFor=\"form-password\">密码</label>\r\n                                <input type=\"password\" name=\"rePwd\"\r\n                                    placeholder=\"重复密码...\"\r\n                                    className=\"form-password form-control\" id=\"form-password\"\r\n                                    onChange={e => this.inputChange(e)}\r\n                                    value={this.state.rePwd} />\r\n                            </div>\r\n                            <button type=\"button\"\r\n                                className=\"btn btn-success\"\r\n                                onClick={() => this.submit()}>注册新账户</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-6 col-sm-offset-3\">\r\n                    <button type=\"button\" className=\"btn btn-link center-block\"\r\n                        onClick={() => {nav.replace(<LoginView />); }}>已有账户，直接登录</button>\r\n                </div>\r\n            </div>\r\n*/ \r\n//# sourceMappingURL=register.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../tonva-tools/dist/entry/register.js\n// module id = 220\n// module chunks = 0","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as React from 'react';\r\nimport { Container, Button, Form } from 'reactstrap';\r\nimport { nav, Page } from '../ui';\r\nimport userApi from './userApi';\r\nexport default class RegSuccess extends React.Component {\r\n    failed() {\r\n        return;\r\n    }\r\n    login() {\r\n        const { user, pwd } = this.props;\r\n        userApi\r\n            .login({ user: user, pwd: pwd })\r\n            .then((retUser) => __awaiter(this, void 0, void 0, function* () {\r\n            if (retUser === undefined) {\r\n                this.failed();\r\n                return;\r\n            }\r\n            yield nav.logined(retUser);\r\n        }));\r\n    }\r\n    render() {\r\n        const { user, pwd } = this.props;\r\n        return (React.createElement(Page, { header: false },\r\n            React.createElement(Container, { className: \"entry-form\" },\r\n                React.createElement(Form, null,\r\n                    React.createElement(\"span\", { className: \"info\" },\r\n                        \"\\u7528\\u6237 \",\r\n                        React.createElement(\"strong\", null,\r\n                            user,\r\n                            \" \"),\r\n                        \" \\u6CE8\\u518C\\u6210\\u529F\\uFF01\"),\r\n                    React.createElement(Button, { color: \"success\", block: true, onClick: () => this.login() }, \"\\u76F4\\u63A5\\u767B\\u5F55\")))));\r\n    }\r\n}\r\n//# sourceMappingURL=regSuccess.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../tonva-tools/dist/entry/regSuccess.js\n// module id = 221\n// module chunks = 0","import * as React from 'react';\r\nimport { Page } from '../ui';\r\nexport default class Forget extends React.Component {\r\n    render() {\r\n        return React.createElement(Page, { header: '忘记密码' }, \"\\u6B63\\u5728\\u8BBE\\u8BA1\\u4E2D...\");\r\n    }\r\n}\r\n//# sourceMappingURL=forget.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../tonva-tools/dist/entry/forget.js\n// module id = 222\n// module chunks = 0"],"sourceRoot":""}