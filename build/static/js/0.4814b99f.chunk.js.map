{"version":3,"sources":["../../tonva-tools/dist/entry/login.js","../../tonva-tools/dist/entry/userApi.js","../../tonva-tools/dist/entry/register.js","../../tonva-tools/dist/entry/regSuccess.js","../../tonva-tools/dist/entry/forget.js"],"names":["__WEBPACK_IMPORTED_MODULE_6__index__","__webpack_require__","__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__webpack_exports__","__WEBPACK_IMPORTED_MODULE_0_react__","[object Object]","super","arguments","schema","__WEBPACK_IMPORTED_MODULE_2__ui__","fields","type","name","placeholder","rules","onSumit","onLoginSubmit","bind","values","user","__WEBPACK_IMPORTED_MODULE_5__userApi__","login","pwd","undefined","clear","errors","push","logined","replace","__WEBPACK_IMPORTED_MODULE_3__register__","logo","props","footer","className","__WEBPACK_IMPORTED_MODULE_1_reactstrap__","color","style","margin","onClick","header","maxWidth","padding","display","position","src","height","flex","fontSize","alignSelf","textAlign","formSchema","block","__WEBPACK_IMPORTED_MODULE_4__forget__","userApi","__WEBPACK_IMPORTED_MODULE_0__net__","params","get","token","Object","__WEBPACK_IMPORTED_MODULE_1__user__","post","__WEBPACK_IMPORTED_MODULE_4__regSuccess__","__WEBPACK_IMPORTED_MODULE_1__ui__","submitText","msg","rePwd","country","mobile","email","inputs","__WEBPACK_IMPORTED_MODULE_3__userApi__","register","nick","show","__WEBPACK_IMPORTED_MODULE_2__login__","retUser","failed"],"mappings":"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","file":"static/js/0.4814b99f.chunk.js","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as React from 'react';\r\nimport { Button } from 'reactstrap';\r\nimport { nav, Page, FormSchema } from '../ui';\r\nimport RegisterView from './register';\r\nimport Forget from './forget';\r\nimport userApi from './userApi';\r\nimport { ValidForm } from '../index';\r\nexport default class Login extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.schema = new FormSchema({\r\n            fields: [\r\n                {\r\n                    type: 'string',\r\n                    name: 'username',\r\n                    placeholder: '用户名',\r\n                    rules: ['required', 'maxlength:100']\r\n                },\r\n                {\r\n                    type: 'password',\r\n                    name: 'password',\r\n                    placeholder: '密码',\r\n                    rules: ['required', 'maxlength:100']\r\n                },\r\n            ],\r\n            onSumit: this.onLoginSubmit.bind(this),\r\n        });\r\n    }\r\n    onLoginSubmit(values) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            let user = yield userApi.login({\r\n                user: values['username'],\r\n                pwd: values['password']\r\n            });\r\n            if (user === undefined) {\r\n                //this.failed();\r\n                this.schema.clear();\r\n                this.schema.errors.push('用户名或密码错！');\r\n            }\r\n            else {\r\n                yield nav.logined(user);\r\n            }\r\n            return undefined;\r\n        });\r\n    }\r\n    click() {\r\n        nav.replace(React.createElement(RegisterView, { logo: this.props.logo }));\r\n    }\r\n    render() {\r\n        let footer = React.createElement(\"div\", { className: 'text-center' },\r\n            React.createElement(Button, { color: \"link\", style: { margin: '0px auto' }, onClick: () => nav.push(React.createElement(RegisterView, { logo: this.props.logo })) }, \"\\u5982\\u679C\\u6CA1\\u6709\\u8D26\\u53F7\\uFF0C\\u8BF7\\u6CE8\\u518C\"));\r\n        return React.createElement(Page, { header: false, footer: footer },\r\n            React.createElement(\"div\", { style: {\r\n                    maxWidth: '400px',\r\n                    margin: '20px auto',\r\n                    padding: '0 30px',\r\n                } },\r\n                React.createElement(\"div\", { className: 'container', style: { display: 'flex', position: 'relative' } },\r\n                    React.createElement(\"img\", { className: 'App-logo', src: this.props.logo, style: { height: '60px', position: 'absolute' } }),\r\n                    React.createElement(\"span\", { style: { flex: 1,\r\n                            fontSize: 'x-large',\r\n                            alignSelf: 'center',\r\n                            textAlign: 'center',\r\n                            margin: '10px',\r\n                        } }, \"\\u540C\\u82B1\")),\r\n                React.createElement(\"div\", { style: { height: '20px' } }),\r\n                React.createElement(ValidForm, { formSchema: this.schema })),\r\n            React.createElement(\"div\", { className: 'constainer' },\r\n                React.createElement(Button, { color: \"link\", block: true, onClick: () => nav.push(React.createElement(Forget, null)) }, \"\\u5FD8\\u8BB0\\u5BC6\\u7801\")));\r\n    }\r\n}\r\n//# sourceMappingURL=login.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../tonva-tools/dist/entry/login.js\n// module id = 220\n// module chunks = 0","import { CenterApi } from '../net';\r\nimport { decodeToken } from '../user';\r\nexport class UserApi extends CenterApi {\r\n    login(params) {\r\n        return this.get('login', params)\r\n            .then((token) => {\r\n            if (token !== undefined)\r\n                return decodeToken(token);\r\n        });\r\n    }\r\n    register(params) {\r\n        return this.post('register', params);\r\n    }\r\n}\r\nconst userApi = new UserApi('tv/user/');\r\nexport default userApi;\r\n//# sourceMappingURL=userApi.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../tonva-tools/dist/entry/userApi.js\n// module id = 221\n// module chunks = 0","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as React from 'react';\r\nimport { nav, Page, FormSchema, ValidForm } from '../ui';\r\nimport LoginView from './login';\r\nimport userApi from './userApi';\r\nimport RegSuccess from './regSuccess';\r\nexport default class Register extends React.Component {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.schema = new FormSchema({\r\n            fields: [\r\n                {\r\n                    type: 'string',\r\n                    name: 'user',\r\n                    placeholder: '用户名',\r\n                    rules: ['required', 'maxlength:100']\r\n                },\r\n                {\r\n                    type: 'password',\r\n                    name: 'pwd',\r\n                    placeholder: '密码',\r\n                    rules: ['required', 'maxlength:100']\r\n                },\r\n                {\r\n                    type: 'password',\r\n                    name: 'rePwd',\r\n                    placeholder: '重复密码',\r\n                    rules: ['required', 'maxlength:100']\r\n                },\r\n            ],\r\n            submitText: '注册新用户',\r\n            onSumit: this.onLoginSubmit.bind(this),\r\n        });\r\n        /*\r\n        private values: Values;\r\n        private timeOut: NodeJS.Timer;\r\n        constructor(props: Props) {\r\n            super(props);\r\n            this.values = {\r\n                user: '',\r\n                pwd: '',\r\n                rePwd: '',\r\n            };\r\n            this.state = {\r\n                values: this.values,\r\n                disabled: true,\r\n                pwdError: false,\r\n                regError: undefined,\r\n            };\r\n        }\r\n        click() {\r\n            nav.replace(<LoginView />);\r\n        }\r\n    \r\n        submit() {\r\n            const {user, pwd, rePwd, country, mobile, email} = this.state.values;\r\n            if (pwd !== rePwd) {\r\n                this.setState({\r\n                    pwdError: true,\r\n                });\r\n                this.timeOutError();\r\n                return false;\r\n            }\r\n            userApi.register({\r\n                nick: undefined,\r\n                user: user,\r\n                pwd: pwd,\r\n                country: undefined,\r\n                mobile: undefined,\r\n                email: undefined,\r\n            }).then(ret => {\r\n                let msg;\r\n                switch (ret) {\r\n                    default: throw 'unknown return';\r\n                    case 0:\r\n                        nav.clear();\r\n                        nav.show(<RegSuccess user={user} pwd={pwd} />);\r\n                        return;\r\n                    case 1:\r\n                        msg = '用户名 ' + user + ' ';\r\n                        break;\r\n                    case 2:\r\n                        msg = '手机号 +' + country + ' ' + mobile + ' ';\r\n                        break;\r\n                    case 3:\r\n                        msg = '电子邮件 ' + email + ' ';\r\n                        break;\r\n                }\r\n                this.setState({\r\n                    regError: msg + '已经被注册过了',\r\n                });\r\n                this.timeOutError();\r\n            });\r\n            return false;\r\n        }\r\n        timeOutError() {\r\n            this.timeOut = global.setTimeout(\r\n                () => {\r\n                    this.setState({\r\n                        pwdError: false,\r\n                        regError: undefined,\r\n                    });\r\n                    global.clearTimeout(this.timeOut);\r\n                    this.timeOut = undefined;\r\n                },\r\n                3000);\r\n        }\r\n        inputChange(event: any) {\r\n            const target = event.target;\r\n            const value = target.type === 'checkbox' ? target.checked : target.value;\r\n            const name = target.name;\r\n            this.values[name] = value;\r\n            if (name === 'pwd') {\r\n                this.values.rePwd = '';\r\n            }\r\n            let {user, pwd, rePwd} = this.values;\r\n            this.setState({\r\n                values: this.values,\r\n                disabled: user.trim().length === 0 || pwd.length === 0 || rePwd.length === 0,\r\n            });\r\n        }\r\n        inputFocus(e: any) {\r\n            this.setState({\r\n                pwdError: false,\r\n                regError: undefined,\r\n            });\r\n        }\r\n        render() {\r\n            let {values, disabled, pwdError, regError} = this.state;\r\n            let {user, pwd, rePwd} = values;\r\n            return (\r\n            <Page header=\"注册\">\r\n            <Container className=\"entry-form\">\r\n                <Form>\r\n                    <Input\r\n                        type=\"text\"\r\n                        placeholder=\"用户名...\"\r\n                        name=\"user\"\r\n                        value={user}\r\n                        onChange={e => this.inputChange(e)}\r\n                        onFocus={e => this.inputFocus(e)}\r\n                    />\r\n                    <Input\r\n                        type=\"password\"\r\n                        placeholder=\"密码...\"\r\n                        name=\"pwd\"\r\n                        value={pwd}\r\n                        onChange={e => this.inputChange(e)}\r\n                        onFocus={e => this.inputFocus(e)}\r\n                    />\r\n                    <Input\r\n                        type=\"password\"\r\n                        placeholder=\"重复密码...\"\r\n                        name=\"rePwd\"\r\n                        value={rePwd}\r\n                        onChange={e => this.inputChange(e)}\r\n                        onFocus={e => this.inputFocus(e)}\r\n                    />\r\n                    <span className={this.errorClass(pwdError)}>\r\n                        密码错误！\r\n                    </span>\r\n                    <span className={this.errorClass(regError !== undefined)}>\r\n                        {regError}\r\n                    </span>\r\n                    <Button\r\n                        onClick={() => this.submit()}\r\n                        disabled={disabled}\r\n                        block={true}\r\n                        color=\"success\"\r\n                    >\r\n                        注册新用户\r\n                    </Button>\r\n                </Form>\r\n            </Container>\r\n            </Page>\r\n            );\r\n        }\r\n        private errorClass(error: boolean) {\r\n            if (error === false) { return 'hidden-xs-up'; }\r\n        }\r\n        */\r\n    }\r\n    onLoginSubmit(values) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            /*\r\n            let user = await userApi.login({\r\n                user: values['username'],\r\n                pwd: values['password']\r\n            });\r\n            if (user === undefined) {\r\n                //this.failed();\r\n                this.schema.clear();\r\n                this.schema.errors.push('用户名或密码错！');\r\n            } else {\r\n                nav.logined(user);\r\n            }\r\n            return undefined;*/\r\n            //const {user, pwd, rePwd, country, mobile, email} = this.state.values;\r\n            let { user, pwd, rePwd, country, mobile, email } = values;\r\n            if (pwd !== rePwd) {\r\n                this.schema.errors.push('密码不对，请重新输入密码！');\r\n                this.schema.inputs['pwd'].clear();\r\n                this.schema.inputs['rePwd'].clear();\r\n                return undefined;\r\n            }\r\n            let ret = yield userApi.register({\r\n                nick: undefined,\r\n                user: user,\r\n                pwd: pwd,\r\n                country: undefined,\r\n                mobile: undefined,\r\n                email: undefined,\r\n            });\r\n            let msg;\r\n            switch (ret) {\r\n                default: throw 'unknown return';\r\n                case 0:\r\n                    nav.clear();\r\n                    nav.show(React.createElement(RegSuccess, { user: user, pwd: pwd }));\r\n                    return;\r\n                case 1:\r\n                    msg = '用户名 ' + user;\r\n                    break;\r\n                case 2:\r\n                    msg = '手机号 +' + country + ' ' + mobile;\r\n                    break;\r\n                case 3:\r\n                    msg = '电子邮件 ' + email;\r\n                    break;\r\n            }\r\n            this.schema.errors.push(msg + ' 已经被注册过了');\r\n            return undefined;\r\n        });\r\n    }\r\n    click() {\r\n        nav.replace(React.createElement(LoginView, { logo: this.props.logo }));\r\n        //nav.replace(<RegisterView />);\r\n    }\r\n    render() {\r\n        return React.createElement(Page, { header: '注册' },\r\n            React.createElement(\"div\", { style: {\r\n                    maxWidth: '400px',\r\n                    margin: '20px auto',\r\n                    padding: '0 30px',\r\n                } },\r\n                React.createElement(\"div\", { className: 'container', style: { display: 'flex', position: 'relative' } },\r\n                    React.createElement(\"img\", { className: 'App-logo', src: this.props.logo, style: { height: '60px', position: 'absolute' } }),\r\n                    React.createElement(\"span\", { style: { flex: 1,\r\n                            fontSize: 'x-large',\r\n                            alignSelf: 'center',\r\n                            textAlign: 'center',\r\n                            margin: '10px',\r\n                        } }, \"\\u540C\\u82B1\")),\r\n                React.createElement(\"div\", { style: { height: '20px' } }),\r\n                React.createElement(ValidForm, { formSchema: this.schema })));\r\n    }\r\n}\r\n/*\r\n            \r\n            <div className=\"row\">\r\n                <div className=\"col-sm-6 col-sm-offset-3 form-box\">\r\n                    <div className=\"form-bottom\">\r\n                        <form role=\"form\" action=\"\" method=\"post\" className=\"login-form\">\r\n                            <div className=\"form-group\">\r\n                                <label className=\"sr-only\" htmlFor=\"form-username\"\r\n                                    style={{color: \"black\"}}>Username</label>\r\n                                <input type=\"text\" name=\"user\"\r\n                                    ref={input => this.userInput=input}\r\n                                    placeholder=\"用户名...\"\r\n                                    className=\"form-username form-control\"\r\n                                    id=\"form-username\"\r\n                                    onChange={e => this.inputChange(e)}\r\n                                    value={this.state.user} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"sr-only\" htmlFor=\"form-password\">密码</label>\r\n                                <input type=\"password\" name=\"pwd\"\r\n                                    placeholder=\"密码...\"\r\n                                    className=\"form-password form-control\" id=\"form-password\"\r\n                                    onChange={e => this.inputChange(e)}\r\n                                    value={this.state.pwd} />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label className=\"sr-only\" htmlFor=\"form-password\">密码</label>\r\n                                <input type=\"password\" name=\"rePwd\"\r\n                                    placeholder=\"重复密码...\"\r\n                                    className=\"form-password form-control\" id=\"form-password\"\r\n                                    onChange={e => this.inputChange(e)}\r\n                                    value={this.state.rePwd} />\r\n                            </div>\r\n                            <button type=\"button\"\r\n                                className=\"btn btn-success\"\r\n                                onClick={() => this.submit()}>注册新账户</button>\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-6 col-sm-offset-3\">\r\n                    <button type=\"button\" className=\"btn btn-link center-block\"\r\n                        onClick={() => {nav.replace(<LoginView />); }}>已有账户，直接登录</button>\r\n                </div>\r\n            </div>\r\n*/ \r\n//# sourceMappingURL=register.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../tonva-tools/dist/entry/register.js\n// module id = 222\n// module chunks = 0","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport * as React from 'react';\r\nimport { Container, Button, Form } from 'reactstrap';\r\nimport { nav, Page } from '../ui';\r\nimport userApi from './userApi';\r\nexport default class RegSuccess extends React.Component {\r\n    failed() {\r\n        return;\r\n    }\r\n    login() {\r\n        const { user, pwd } = this.props;\r\n        userApi\r\n            .login({ user: user, pwd: pwd })\r\n            .then((retUser) => __awaiter(this, void 0, void 0, function* () {\r\n            if (retUser === undefined) {\r\n                this.failed();\r\n                return;\r\n            }\r\n            yield nav.logined(retUser);\r\n        }));\r\n    }\r\n    render() {\r\n        const { user, pwd } = this.props;\r\n        return (React.createElement(Page, { header: false },\r\n            React.createElement(Container, { className: \"entry-form\" },\r\n                React.createElement(Form, null,\r\n                    React.createElement(\"span\", { className: \"info\" },\r\n                        \"\\u7528\\u6237 \",\r\n                        React.createElement(\"strong\", null,\r\n                            user,\r\n                            \" \"),\r\n                        \" \\u6CE8\\u518C\\u6210\\u529F\\uFF01\"),\r\n                    React.createElement(Button, { color: \"success\", block: true, onClick: () => this.login() }, \"\\u76F4\\u63A5\\u767B\\u5F55\")))));\r\n    }\r\n}\r\n//# sourceMappingURL=regSuccess.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../tonva-tools/dist/entry/regSuccess.js\n// module id = 223\n// module chunks = 0","import * as React from 'react';\r\nimport { Page } from '../ui';\r\nexport default class Forget extends React.Component {\r\n    render() {\r\n        return React.createElement(Page, { header: '忘记密码' }, \"\\u6B63\\u5728\\u8BBE\\u8BA1\\u4E2D...\");\r\n    }\r\n}\r\n//# sourceMappingURL=forget.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../tonva-tools/dist/entry/forget.js\n// module id = 224\n// module chunks = 0"],"sourceRoot":""}